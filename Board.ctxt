#BlueJ class context
comment0.params=
comment0.target=Board()
comment1.params=array
comment1.target=Board(Slot[][])
comment10.params=x
comment10.target=Slot[]\ returnColumn(int)
comment10.text=\n\ Sam\ -\ when\ you\ have\ a\ matrix\ mat[a][b]\ and\ you\ want\ all\ of\ the\ elements\ in\ a\ single\ a\n\ strip,\ you\ can\ just\ use\ mat[a]\ and\ it\ will\ return\ the\ array\ you\ want.\ \ However,\ if\ you\n\ want\ all\ the\ elements\ in\ a\ single\ b\ strip,\ you\ need\ to\ iterate\ through\ the\ matrix\ like\n\ you\ did\ in\ the\ returnRow\ method.\n
comment11.params=x\ y
comment11.target=int\ getSquareNumber(int,\ int)
comment11.text=\n\ Comment\ this\ method\ -\ also\ use\ internal\ comments\ here\ on\ the\ logic\ of\ the\ if\n\ statements\ so\ it's\ easier\ to\ follow.\ \ If\ you\ ever\ write\ a\ method\ that\ is\ intricate\n\ enough\ that\ you\ think\ that\ if\ you\ come\ back\ in\ a\ week\ you\ might\ not\ remember\ how\ it\n\ works\ or\ be\ able\ to\ debug\ it,\ you\ should\ use\ internal\ comments.\ \ If\ you\ think\n\ you\ will\ still\ understand\ it\ because\ it's\ written\ clearly\ /\ is\ obvious,\n\ you\ don't\ necessarily\ need\ the\ internal\ notes,\ but\ you\ should\ still\ have\ JavaDoc.\n
comment12.params=num
comment12.target=int\ getIStarterForSquares(int)
comment12.text=\n\ Comment\ this\ method\ -\ not\ sure\ what\ it\ does.\n\ NOTE\:\ If\ this\ is\ just\ a\ method\ that\ you\ use\ internally\ in\ one\ of\ your\n\ other\ methods\ but\ I'm\ not\ supposed\ to\ invoke\ it\ outside\ of\ this\ class,\n\ make\ it\ "private"\ instead\ of\ public\ and\ put\ it\ at\ the\ bottom\ of\ the\ class.\n
comment13.params=num
comment13.target=int\ getJStarterForSquares(int)
comment13.text=\n\ Comment\ this\ method\ -\ not\ sure\ what\ it\ does.\n\ NOTE\:\ If\ this\ is\ just\ a\ method\ that\ you\ use\ internally\ in\ one\ of\ your\n\ other\ methods\ but\ I'm\ not\ supposed\ to\ invoke\ it\ outside\ of\ this\ class,\n\ make\ it\ "private"\ instead\ of\ public\ and\ put\ it\ at\ the\ bottom\ of\ the\ class.\n
comment14.params=squareNum
comment14.target=Slot[]\ returnSquare(int)
comment15.params=r
comment15.target=Slot[]\ getRow(int)
comment16.params=c
comment16.target=Slot[]\ getColumn(int)
comment17.params=c
comment17.target=Slot[]\ getCol(int)
comment18.params=s
comment18.target=Slot[]\ getSquare(int)
comment2.params=x\ y
comment2.target=Slot\ getSlot(int,\ int)
comment2.text=\n\ This\ method\ returns\ the\ number\ in\ a\ spot.\n\ @param\ x\ The\ column\ /\ x-coordinate\n\ @param\ y\ The\ row\ /\ y-coordinate\n\ @return\ the\ slot\ object\ for\ the\ spot\n
comment3.params=x\ y\ num
comment3.target=void\ setNumberInSpot(int,\ int,\ int)
comment3.text=\n\ This\ method\ sets\ the\ number\ in\ a\ spot.\n\ @param\ x\ The\ column\ /\ x-coordinate\n\ @param\ y\ The\ row\ /\ y-coordinate\n\ @param\ num\ is\ the\ number\ it\ should\ set\ to\n
comment4.params=y\ num
comment4.target=boolean\ checkRow(int,\ int)
comment4.text=\n\ This\ method\ checks\ if\ a\ given\ value\ is\ in\ the\ row\n\ @param\ y\ The\ row\ /\ y-coordinate\n\ @param\ num\ is\ the\ number\ it\ should\ set\ to\n\ @return\ if\ the\ row\ is\ clear\ of\ that\ number\n
comment5.params=x\ num
comment5.target=boolean\ checkColumn(int,\ int)
comment5.text=\n\ This\ method\ checks\ if\ a\ given\ value\ is\ in\ the\ col\n\ @param\ x\ The\ column\ /\ x-coordinate\n\ @param\ num\ is\ the\ number\ it\ should\ set\ to\n\ @return\ if\ the\ col\ is\ clear\ of\ that\ number\n
comment6.params=
comment6.target=Slot[][]\ returnBoard()
comment7.params=x\ y\ num
comment7.target=boolean\ checkThreeSquare(int,\ int,\ int)
comment7.text=\n\ This\ method\ checks\ a\ box\ to\ see\ if\ a\ given\ number\ is\ present.\n\ @param\ x\ The\ column\ /\ x-coordinate\n\ @param\ y\ The\ row\ /\ y-coordinate\n\ @param\ num\ The\ number\ you\ are\ checking\n\ @return\ Whether\ the\ number\ is\ present\ in\ the\ box\n
comment8.params=x\ y\ num
comment8.target=boolean\ checkAll(int,\ int,\ int)
comment8.text=\n\ Sam\ -\ sometimes\ it's\ easier\ to\ follow\ condensed\ code,\ and\ often\ many\ lines\ are\ unnecessary.\n\ The\ first\ way\ I\ condensed\ this\ method\ was\ by\ eliminating\ the\ "\=\=true"\ parts\ of\ the\ conditions.\n\ Saying\ if(a\=\=true)\ is\ the\ same\ as\ saying\ if(a).\ \ Next\ you\ said\ if\ (condition)\ return\ true\ else\n\ return\ false.\ \ That\ can\ be\ condensed\ to\ simply\ return\ (condition),\ which\ will\ return\ true\ if\n\ the\ condition\ evaluates\ to\ true,\ and\ false\ otherwise.\ \ As\ a\ general\ rule\ if\ you\ can\ condense\ your\n\ code\ without\ making\ it\ impossibly\ complicated\ to\ read,\ you\ should.\ \n
comment9.params=y
comment9.target=Slot[]\ returnRow(int)
numComments=19
